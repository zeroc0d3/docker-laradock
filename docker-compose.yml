version: '3.2'

services:

#================================================================================================
# CORE-CONSUL
#================================================================================================
  consul:
    restart: always
    build:
      context: ./docker/core-consul
    ports:
      - "8500:8500"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - CONSUL_VERSION=${CONSUL_VERSION}
      - CONSULTEMPLATE_VERSION=${CONSULTEMPLATE_VERSION}
      - CONSUL_OPTIONS=-server -bootstrap-expect 1 -client 0.0.0.0 -ui    # minimal server options

#================================================================================================
# ADMINER
#================================================================================================
  adminer:
    restart: always
    build:
      context: ./docker/adminer/${ADMINER_VERSION}
    ports:
      - "${ADMINER_PORT}:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SESSION_ADMINER}:/sessions                       # volume for sessions
    environment:
      - ADMINER_VERSION=${ADMINER_VERSION}
      - INSTALL_MSSQL=${INSTALL_MSSQL}
    networks:
      - backend
      - frontend

#================================================================================================
# AEROSPIKE
#================================================================================================
  aerospike:
    restart: always
    build:
      context: ./docker/aerospike/${AEROSPIKE_VERSION}
    links:
      - workspace
    ports:
      - "${AEROSPIKE_SERVICE_PORT}:3000"
      - "${AEROSPIKE_FABRIC_PORT}:3001"
      - "${AEROSPIKE_HEARTBEAT_PORT}:3002"
      - "${AEROSPIKE_INFO_PORT}:3003"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_AEROSPIKE}:/etc/aerospike/aerospike.conf  # volume for config
      - ${DATA_AEROSPIKE}:/opt/aerospike/data              # volume for data
    environment:
      - AEROSPIKE_VERSION=${AEROSPIKE_VERSION}
    networks:
      - backend

#================================================================================================
# MARIADB
#================================================================================================
  mariadb:
    restart: always
    build:
      context: ./docker/mariadb/${MARIADB_VERSION}
    ports:
      - "${MARIADB_PORT}:3306"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA_MARIADB}:/var/lib/mysql                     # volume for data
      - ${LOG_MARIADB}:/var/log/mysql                      # log mariadb
    environment:
      - MARIADB_VERSION=${MARIADB_VERSION}
      - MARIADB_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}     # root password
      - MARIADB_ROOT_HOST=${MARIADB_ROOT_HOST}             # grant user hostmask (optional)
      - MARIADB_DATABASE=${MARIADB_DATABASE}               # create database (optional)
      - MARIADB_USER=${MARIADB_USER}                       # grant user name (optional)
      - MARIADB_PASSWORD=${MARIADB_PASSWORD}               # grant user password (optional)
    networks:
      - backend

#================================================================================================
# MONGODB
#================================================================================================
  mongodb:
    restart: always
    build:
      context: ./docker/mongodb/${MONGO_VERSION}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_MONGODB}:/etc/mongodb.conf
      - ${DATA_MONGODB}/db:/data/db                        # volume for data
      - ${DATA_MONGODB}/configdb:/data/configdb            # volume for config
      - ${DATA_MONGODB}:/var/lib/mongodb
      - ${LOG_MONGODB}:/var/log/mongodb/mongod.log         # log mongodb
    environment:
      - MONGO_VERSION=${MONGO_VERSION}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_HOST=${MONGO_INITDB_ROOT_HOST}
      - MONGO_DATABASE=${MONGO_DATABASE}
      - MONGO_USER=${MONGO_USER}
      - MONGO_PASSWORD=${MONGO_PASSWORD}
    networks:
      - backend

#================================================================================================
# MYSQL
#================================================================================================
  mysql:
    restart: always
    build:
      context: ./docker/mysql/${MYSQL_VERSION}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_MYSQL}:/etc/my.cnf                           # my.cnf mysql
      - ${CONFIG_MYSQL_DOCKER}:/etc/mysql/conf.d/docker.cnf   # docker.cnf mysql
      - ${DATA_MYSQL}:/var/lib/mysql                          # volume for data
      - ${LOG_MYSQL}:/var/log/mysql                           # log mysql
    environment:
      - MYSQL_VERSION=${MYSQL_VERSION}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}         # root password
      - MYSQL_ROOT_HOST=${MYSQL_ROOT_HOST}                 # grant user hostmask (optional)
      - MYSQL_DATABASE=${MYSQL_DATABASE}                   # create database (optional)
      - MYSQL_USER=${MYSQL_USER}                           # grant user name (optional)
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}                   # grant user password (optional)
    networks:
      - backend

#================================================================================================
# NGINX
#================================================================================================
  nginx:
    restart: always
    build:
      context: ./docker/nginx/${NGINX_VERSION}
    links:
      - workspace
    ports:
      - "${NGINX_HTTP_PORT}:80"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      #- ${CONFIG_NGINX}:/etc/nginx/nginx.conf                  # nginx config path
      - ${CONFIG_NGINX_PHPFPM}:/etc/nginx/conf.d/default.conf   # phpfpm config path
      - ${LOG_NGINX}:/var/log/nginx                             # log nginx
      - ${WORKSPACE}:/var/www                                   # volume for data
    environment:
      - NGINX_VERSION=${NGINX_VERSION}
    networks:
      - backend
      - frontend

#================================================================================================
# PERCONA
#================================================================================================
  percona:
    restart: always
    build:
      context: ./docker/percona/${PERCONA_VERSION}
    ports:
      - "${PERCONA_PORT}:3306"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_MYSQL}:/etc/my.cnf                           # my.cnf mysql
      - ${CONFIG_MYSQL_DOCKER}:/etc/mysql/conf.d/docker.cnf   # docker.cnf mysql
      - ${DATA_PERCONA}:/var/lib/mysql                        # volume for data
      - ${LOG_PERCONA}:/var/log/mysql                         # log percona
    environment:
      - MYSQL_VERSION=${PERCONA_VERSION}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}         # root password
      - MYSQL_ROOT_HOST=${MYSQL_ROOT_HOST}                 # grant user hostmask (optional)
      - MYSQL_DATABASE=${MYSQL_DATABASE}                   # create database (optional)
      - MYSQL_USER=${MYSQL_USER}                           # grant user name (optional)
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}                   # grant user password (optional)
    networks:
      - backend

#================================================================================================
# PGADMIN
#================================================================================================
  pgadmin:
    restart: always
    build:
      context: ./docker/pgadmin/${PGADMIN_VERSION}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      - postgresql
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SESSION_PGADMIN}:/sessions                       # volume for sessions
    environment:
      - PGADMIN_VERSION=${PGADMIN_VERSION}
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
    networks:
      - backend
      - frontend

#================================================================================================
# PHP-FPM
#================================================================================================
  phpfpm:
    restart: always
    build:
      context: ./docker/phpfpm/${PHP_VERSION}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_PHPFPM}:/usr/local/etc/php-fpm.conf                                # config path
      - ${CONFIG_PHPFPM_INI}:/usr/local/etc/php/php.ini                             # ini path
      - ${CONFIG_PHP_XDEBUG}:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini    # xdebug config
      - ${LOG_PHPFPM}:/var/log/phpfpm                                               # log phpfpm
      - ${VENDOR_COMPOSER}:/usr/local/bin/composer                                  # vendor composer
      - ${VENDOR_DEPLOYER}:/usr/local/bin/dep                                       # vendor deployer
      - ${VENDOR_PHP_CS_FIXER}:/usr/local/bin/php-cs-fixer                          # vendor php-cs-fixer
      - ${WORKSPACE}:/var/www                                                       # volume for data
    environment:
      - ALPINE_VERSION=${ALPINE_VERSION}
      - PHP_VERSION=${PHP_VERSION}
      - XDEBUG_VERSION=${XDEBUG_VERSION}
      - DEBUG=1
    networks:
      - backend

#================================================================================================
# PHPMYADMIN
#================================================================================================
  phpmyadmin:
    restart: always
    build:
      context: ./docker/phpmyadmin/${PHPMYADMIN_VERSION}
    ports:
      - "${PHPMYADMIN_PORT}:80"
    depends_on:
      - "${PMA_DB_ENGINE}"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${SESSION_PHPMYADMIN}:/sessions                    # volume for sessions
      - ${CONFIG_PHPMYADMIN}:/www/config.inc.php           # volume for config phpmyadmin
    environment:
      - ALPINE_VERSION=${ALPINE_VERSION}
      - PHP_VERSION=${PHP_VERSION}
      - PHPMYADMIN_VERSION=${PHPMYADMIN_VERSION}
      - PMA_ARBITRARY=${PMA_ARBITRARY}
      - MYSQL_HOST=${PMA_DB_ENGINE}
      - MYSQL_USER=${PMA_USER}
      - MYSQL_PASSWORD=${PMA_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${PMA_ROOT_PASSWORD}
    networks:
      - backend
      - frontend

#================================================================================================
# POSTGRESQL
#================================================================================================
  postgresql:
    restart: always
    build:
      context: ./docker/postgresql/${POSTGRES_VERSION}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA_POSTGRESQL}/postgres:/var/lib/postgresql              # volume for data
    environment:
      - POSTGRES_VERSION=${POSTGRES_VERSION}
      - POSTGRES_ROOT_HOST=${POSTGRES_ROOT_HOST}                     # grant user hostmask (optional)
      - POSTGRES_DATABASE=${POSTGRES_DATABASE}                       # create database (optional)
      - POSTGRES_USER=${POSTGRES_USER}                               # grant user name (optional)
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}                       # grant user password (optional)
    networks:
      - backend

#================================================================================================
# SPARK
#================================================================================================
  spark-master:
    restart: always
    depends_on:
      - consul
    build:
      context: ./docker/spark/${SPARK_VERSION}
    expose:
      - 7001
      - 7002
      - 7003
      - 7004
      - 7005
      - 7006
      - 7077
      - 6066
    ports:
      - "4040:4040"
      - "6066:6066"
      - "7077:7077"
      - "${SPARK_CONSUL_SERVICEPORT_MASTER}:8080"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - SPARK_HOME=${DATA_SPARK_MASTER}
      - SPARK_VERSION=${SPARK_VERSION}
      - HADOOP_VERSION=${HADOOP_VERSION}
      - CONSUL_AGENT=consul
      - CONSUL_SERVICENAME=${SPARK_CONSUL_SERVICENAME_MASTER}
      - CONSUL_SERVICETAGS=${SPARK_CONSUL_SERVICETAGS_MASTER}
      - CONSUL_SERVICEPORT=${SPARK_CONSUL_SERVICEPORT_MASTER}
      - CONSUL_CHECKTYPE=${SPARK_CONSUL_CHECKTYPE_MASTER}
    networks:
      - frontend

  spark-worker:
    restart: always
    depends_on:
      - consul
    build:
      context: ./docker/spark/${SPARK_VERSION}
    expose:
      - 7012
      - 7013
      - 7014
      - 7015
      - 7016
      - 8881
    ports:
      - "${SPARK_CONSUL_SERVICEPORT_WORKER}:8081"
    volumes:
      - /etc/localtime:/etc/localtime:ro
    environment:
      - SPARK_HOME=${DATA_SPARK_WORKER}
      - SPARK_VERSION=${SPARK_VERSION}
      - HADOOP_VERSION=${HADOOP_VERSION}
      - CONSUL_AGENT=consul
      - CONSUL_SERVICENAME=${SPARK_CONSUL_SERVICENAME_WORKER}
      - CONSUL_SERVICETAGS=${SPARK_CONSUL_SERVICETAGS_WORKER}
      - CONSUL_SERVICEPORT=${SPARK_CONSUL_SERVICEPORT_WORKER}
      - CONSUL_CHECKTYPE=${SPARK_CONSUL_CHECKTYPE_WORKER}
      - SPARK_MASTERURL=${SPARK_MASTERURL}
    networks:
      - frontend

#================================================================================================
# TERRAFORM
#================================================================================================
  terraform:
    restart: always
    build:
      context: ./docker/terraform/${TERRAFORM_VERSION}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${DATA_TERRAFORM}:/data                            # volume for data
    environment:
      - TERRAFORM_VERSION=${TERRAFORM_VERSION}
    networks:
      - backend

#================================================================================================
# WORKSPACE
#================================================================================================
  workspace:
    restart: always
    build:
      context: ./docker/phpfpm/${PHP_VERSION}
    links:
      - ${DEFAULT_DATABASE}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${CONFIG_PHPFPM}:/usr/local/etc/php-fpm.conf                                # config path
      - ${CONFIG_PHPFPM_INI}:/usr/local/etc/php/php.ini                             # ini path
      - ${CONFIG_PHP_XDEBUG}:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini    # xdebug config
      - ${LOG_PHPFPM}:/var/log/phpfpm                                               # log phpfpm
      - ${VENDOR_COMPOSER}:/usr/local/bin/composer                                  # vendor composer
      - ${VENDOR_DEPLOYER}:/usr/local/bin/dep                                       # vendor deployer
      - ${VENDOR_PHP_CS_FIXER}:/usr/local/bin/php-cs-fixer                          # vendor php-cs-fixer
      - ${WORKSPACE}:/var/www                                                       # volume for data
    environment:
      - ALPINE_VERSION=${ALPINE_VERSION}
      - PHP_VERSION=${PHP_VERSION}
      - XDEBUG_VERSION=${XDEBUG_VERSION}
      - DEBUG=1
    networks:
      - backend

#================================================================================================
# NETWORK SETUP
#================================================================================================
networks:
  backend:
    driver: "bridge"
  frontend:
    driver: "bridge"

#================================================================================================
# VOLUME SETUP
#================================================================================================
volumes:
  consul:
    driver: "local"
  adminer:
    driver: "local"
  aerospike:
    driver: "local"
  mariadb:
    driver: "local"
  mongodb:
    driver: "local"
  mysql:
    driver: "local"
  nginx:
    driver: "local"
  percona:
    driver: "local"
  pgadmin:
    driver: "local"
  phpfpm:
    driver: "local"
  phpmyadmin:
    driver: "local"
  postgresql:
    driver: "local"
  spark-master:
    driver: "local"
  spark-worker:
    driver: "local"
  terraform:
    driver: "local"
  workspace:
    driver: "local"